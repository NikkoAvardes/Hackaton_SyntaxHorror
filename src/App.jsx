import React, { useState, useRef, useEffect } from 'react';
import { Canvas, useFrame, useThree } from '@react-three/fiber';
import { PointerLockControls, useGLTF } from '@react-three/drei';
import * as THREE from 'three';
import './App.css';

console.log('App.jsx –∑–∞–≥—Ä—É–∂–µ–Ω');

// FPS –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
function FirstPersonControls({ onMove, currentRoom }) {
  const { camera, gl } = useThree();
  const controlsRef = useRef();
  const velocity = useRef(new THREE.Vector3());
  const direction = useRef(new THREE.Vector3());
  
  // üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–û–ó–ò–¶–ò–ô –î–õ–Ø –ö–ê–ñ–î–û–ô –ö–û–ú–ù–ê–¢–´ üéØ
  // spawn: [X, Y, Z] - –ø–æ–∑–∏—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É  
  // height: Y - –≤—ã—Å–æ—Ç–∞ –∫–∞–º–µ—Ä—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
  const roomPositions = {
    chambre1: {
      spawn: [-1, 0.1, -3.5],    // X: –ø—Ä–∞–≤–æ/–ª–µ–≤–æ, Y: –≤—ã—Å–æ—Ç–∞, Z: –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
      height: -1.6               // –í—ã—Å–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)
    },
    chambre2: {
      spawn: [2.40, 0.1, 3.60],   // –¶–µ–Ω—Ç—Ä –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ–º–Ω–æ–≥–æ –≤–ø–µ—Ä–µ–¥  
      height: -0.3               // –í—ã—Å–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (–ò–ó–ú–ï–ù–ò–¢–ï –î–õ–Ø –†–ï–ì–£–õ–ò–†–û–í–ö–ò)
    },
    chambreWC: {
      spawn: [2, 0.1, -0.50],    // Position d'entr√©e depuis chambre2
      height: -0.6              // Hauteur vo –≤—Ä–µ–º—è –∏–≥—Ä—ã
    },
    chambre3: {
      spawn: [0, 0.1, 5],        // –¶–µ–Ω—Ç—Ä –∫–æ–º–Ω–∞—Ç—ã
      height: 0.1               // –í—ã—Å–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞)
    }
  };
  
  const [moveForward, setMoveForward] = useState(false);
  const [moveBackward, setMoveBackward] = useState(false);
  const [moveLeft, setMoveLeft] = useState(false);
  const [moveRight, setMoveRight] = useState(false);

  useEffect(() => {
    const handleKeyDown = (event) => {
      switch (event.code) {
        case 'KeyW': setMoveForward(true); break;
        case 'KeyA': setMoveLeft(true); break;
        case 'KeyS': setMoveBackward(true); break;
        case 'KeyD': setMoveRight(true); break;
      }
    };

    const handleKeyUp = (event) => {
      switch (event.code) {
        case 'KeyW': setMoveForward(false); break;
        case 'KeyA': setMoveLeft(false); break;
        case 'KeyS': setMoveBackward(false); break;
        case 'KeyD': setMoveRight(false); break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    };
  }, []);

  useFrame((state, delta) => {
    if (!controlsRef.current) return;

    velocity.current.x -= velocity.current.x * 10.0 * delta;
    velocity.current.z -= velocity.current.z * 10.0 * delta;

    direction.current.z = Number(moveForward) - Number(moveBackward);
    direction.current.x = Number(moveRight) - Number(moveLeft);
    direction.current.normalize();

    if (moveForward || moveBackward) velocity.current.z -= direction.current.z * 40.0 * delta;
    if (moveLeft || moveRight) velocity.current.x -= direction.current.x * 40.0 * delta;

    controlsRef.current.moveRight(-velocity.current.x * delta);
    controlsRef.current.moveForward(-velocity.current.z * delta);

    // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É –∫–∞–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–º–µ—â–µ–Ω–∏—è
    const roomHeight = roomPositions[currentRoom]?.height || -1.6;
    camera.position.y = roomHeight;

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–º–µ—â–µ–Ω–∏—è
    let boundaries = { minX: -14, maxX: 14, minZ: -14, maxZ: 14 }; // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    switch (currentRoom) {
      case 'chambre1':
        boundaries = { minX: -1.3, maxX: 1.3, minZ: -3.5, maxZ: -2.3 };
        break;
      case 'chambre2':
        boundaries = { minX: -10, maxX: 10, minZ: -12, maxZ: 6 };
        break;
      case 'chambreWC':
        boundaries = { minX: -2, maxX: 8, minZ: -2, maxZ: 8 };
        break;
      case 'chambre3':
        boundaries = { minX: -12, maxX: 12, minZ: -12, maxZ: 12 };
        break;
      default:
        boundaries = { minX: -14, maxX: 14, minZ: -14, maxZ: 14 };
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    camera.position.x = Math.max(boundaries.minX, Math.min(boundaries.maxX, camera.position.x));
    camera.position.z = Math.max(boundaries.minZ, Math.min(boundaries.maxZ, camera.position.z));

    if (onMove) {
      onMove(camera.position);
    }
  });

  // Effet pour repositionner la cam√©ra lors du changement de chambre
  useEffect(() => {
    const spawnPosition = roomPositions[currentRoom]?.spawn;
    if (spawnPosition) {
      camera.position.set(...spawnPosition);
      console.log(`üìç –ü–æ–∑–∏—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${currentRoom}:`, spawnPosition);
    }
  }, [currentRoom, camera]);

  return (
    <PointerLockControls
      ref={controlsRef}
      args={[camera, gl.domElement]}
    />
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ GLB –º–æ–¥–µ–ª–∏
function GLBModel({ path, visible = true }) {
  try {
    const { scene } = useGLTF(path);
    
    useEffect(() => {
      if (scene) {
        scene.traverse((child) => {
          if (child.isMesh) {
            child.castShadow = true;
            child.receiveShadow = true;
            
            // –ù–µ–º–Ω–æ–≥–æ –æ—Å–≤–µ—Ç–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            if (child.material) {
              child.material.color.multiplyScalar(0.8);
            }
          }
        });
      }
    }, [scene]);

    return scene && visible ? <primitive object={scene} scale={[1, 1, 1]} position={[0, 0, 0]} /> : null;
  } catch (error) {
    console.log('GLB –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', path);
    return null;
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–¥–æ–≤–æ–≥–æ –∑–∞–º–∫–∞
function CodeLock({ isVisible, onSuccess, onClose }) {
  const [code, setCode] = useState('');
  const [isWrong, setIsWrong] = useState(false);
  const correctCode = '1234';

  const handleInput = (digit) => {
    if (code.length < 4) {
      const newCode = code + digit;
      setCode(newCode);
      
      if (newCode.length === 4) {
        if (newCode === correctCode) {
          console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥!');
          setTimeout(() => {
            onSuccess();
            setCode('');
          }, 500);
        } else {
          console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥');
          setIsWrong(true);
          setTimeout(() => {
            setCode('');
            setIsWrong(false);
          }, 1000);
        }
      }
    }
  };

  const handleClear = () => {
    setCode('');
    setIsWrong(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–¥–æ–≤–æ–≥–æ –∑–∞–º–∫–∞
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.code === 'Escape' && isVisible) {
        console.log('üö™ ESC –≤ –∫–æ–¥–æ–≤–æ–º –∑–∞–º–∫–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º');
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscKey);
    return () => document.removeEventListener('keydown', handleEscKey);
  }, [isVisible, onClose]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–æ–º –º—ã—à–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–æ–≤–æ–≥–æ –∑–∞–º–∫–∞
  useEffect(() => {
    if (isVisible) {
      // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä
      document.exitPointerLock();
      console.log('üñ±Ô∏è –ö—É—Ä—Å–æ—Ä –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞');
    }
  }, [isVisible]);

  if (!isVisible) return null;

  return (
    <div 
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100vw',
        height: '100vh',
        background: 'rgba(0,0,0,0.9)',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        zIndex: 2000,
        cursor: 'default' // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å–æ—Ä
      }}
      onClick={(e) => e.stopPropagation()} // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π
      onMouseDown={(e) => e.preventDefault()} // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∫—É—Ä—Å–æ—Ä–∞
    >
      <div 
        style={{
          background: '#333',
          padding: '30px',
          borderRadius: '10px',
          border: '2px solid #666',
          textAlign: 'center',
          color: 'white'
        }}
        onClick={(e) => e.stopPropagation()}
        onMouseDown={(e) => e.preventDefault()}
      >
        <h2 style={{ margin: '0 0 20px 0', color: '#ff6666' }}>üîí –ö–û–î–û–í–´–ô –ó–ê–ú–û–ö</h2>
        <div style={{
          fontSize: '24px',
          margin: '20px 0',
          padding: '10px',
          background: '#222',
          border: isWrong ? '2px solid #ff0000' : '2px solid #666',
          borderRadius: '5px',
          fontFamily: 'monospace',
          minHeight: '40px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }}>
          {code.replace(/./g, '*') || (isWrong ? '–û–®–ò–ë–ö–ê!' : '----')}
        </div>
        
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(3, 1fr)',
          gap: '10px',
          margin: '20px 0'
        }}>
          {[1,2,3,4,5,6,7,8,9].map(num => (
            <button
              key={num}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                handleInput(num.toString());
              }}
              onMouseDown={(e) => e.preventDefault()} // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞—Ö–≤–∞—Ç –∫—É—Ä—Å–æ—Ä–∞
              style={{
                padding: '15px',
                fontSize: '18px',
                background: '#555',
                color: 'white',
                border: '1px solid #777',
                borderRadius: '5px',
                cursor: 'pointer'
              }}
              onMouseOver={(e) => e.target.style.background = '#777'}
              onMouseOut={(e) => e.target.style.background = '#555'}
            >
              {num}
            </button>
          ))}
          <button
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              handleClear();
            }}
            onMouseDown={(e) => e.preventDefault()}
            style={{
              padding: '15px',
              fontSize: '16px',
              background: '#cc3333',
              color: 'white',
              border: '1px solid #777',
              borderRadius: '5px',
              cursor: 'pointer'
            }}
            onMouseOver={(e) => e.target.style.background = '#ff3333'}
            onMouseOut={(e) => e.target.style.background = '#cc3333'}
          >
            C
          </button>
          <button
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              handleInput('0');
            }}
            onMouseDown={(e) => e.preventDefault()}
            style={{
              padding: '15px',
              fontSize: '18px',
              background: '#555',
              color: 'white',
              border: '1px solid #777',
              borderRadius: '5px',
              cursor: 'pointer'
            }}
            onMouseOver={(e) => e.target.style.background = '#777'}
            onMouseOut={(e) => e.target.style.background = '#555'}
          >
            0
          </button>
          <button
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              onClose();
            }}
            onMouseDown={(e) => e.preventDefault()}
            style={{
              padding: '15px',
              fontSize: '16px',
              background: '#666',
              color: 'white',
              border: '1px solid #777',
              borderRadius: '5px',
              cursor: 'pointer'
            }}
            onMouseOver={(e) => e.target.style.background = '#888'}
            onMouseOut={(e) => e.target.style.background = '#666'}
          >
            ESC
          </button>
        </div>
      </div>
    </div>
  );
}

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞ (fallback)
function Room() {
  return (
    <group>
      {/* –ü–æ–ª - —Å–≤–µ—Ç–ª–µ–µ */}
      <mesh receiveShadow position={[0, -1, 0]} rotation={[-Math.PI / 2, 0, 0]}>
        <planeGeometry args={[30, 30]} />
        <meshLambertMaterial color="#333333" />
      </mesh>

      {/* –°—Ç–µ–Ω—ã - —Å–≤–µ—Ç–ª–µ–µ */}
      <mesh position={[0, 5, -15]}>
        <boxGeometry args={[30, 10, 1]} />
        <meshLambertMaterial color="#444444" />
      </mesh>
      
      <mesh position={[0, 5, 15]}>
        <boxGeometry args={[30, 10, 1]} />
        <meshLambertMaterial color="#444444" />
      </mesh>
      
      <mesh position={[-15, 5, 0]}>
        <boxGeometry args={[1, 10, 30]} />
        <meshLambertMaterial color="#444444" />
      </mesh>
      
      <mesh position={[15, 5, 0]}>
        <boxGeometry args={[1, 10, 30]} />
        <meshLambertMaterial color="#444444" />
      </mesh>

      {/* –ü–æ—Ç–æ–ª–æ–∫ - —Å–≤–µ—Ç–ª–µ–µ */}
      <mesh position={[0, 10, 0]} rotation={[Math.PI / 2, 0, 0]}>
        <planeGeometry args={[30, 30]} />
        <meshLambertMaterial color="#222222" />
      </mesh>

      {/* –û–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ - —è—Ä—á–µ */}
      <mesh position={[8, 0, 0]}>
        <boxGeometry args={[1, 2, 1]} />
        <meshLambertMaterial color="#cc0000" />
      </mesh>
      
      <mesh position={[-8, 0, 0]}>
        <boxGeometry args={[1, 2, 1]} />
        <meshLambertMaterial color="#00cc00" />
      </mesh>
      
      <mesh position={[0, 0, -8]}>
        <boxGeometry args={[1, 2, 1]} />
        <meshLambertMaterial color="#0000cc" />
      </mesh>
    </group>
  );
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è —Å—Ü–µ–Ω–∞
function HorrorScene({ onTrigger, currentRoom, onDoorInteraction, onCodeClose, onRoomChange }) {
  /* 
  ================================================
  üéØ –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ü–û–ó–ò–¶–ò–ô –ö–û–ú–ù–ê–¢ üéØ
  ================================================
  
  –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ:
  
  spawn: [X, Y, Z] - –ü–æ–∑–∏—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É
    X: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ = –≤–ª–µ–≤–æ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ = –≤–ø—Ä–∞–≤–æ
    Y: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ = –Ω–∏–∂–µ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ = –≤—ã—à–µ 
    Z: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ = –Ω–∞–∑–∞–¥, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ = –≤–ø–µ—Ä–µ–¥
    
  height: –í—ã—Å–æ—Ç–∞ –∫–∞–º–µ—Ä—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    -1.6 = —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞
    -0.5 = –≤—ã—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π
    -3.0 = –Ω–∏–∂–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π
    
  –ü—Ä–∏–º–µ—Ä—ã:
  - –î–ª—è chambre2: –µ—Å–ª–∏ –±–µ–≥–∞–µ—Ç–µ –ø–æ–¥ –∑–µ–º–ª–µ–π, —É–≤–µ–ª–∏—á—å—Ç–µ height –¥–æ -0.5 –∏–ª–∏ 0.1
  - –î–ª—è spawn: –µ—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç–µ—Å—å –≤ —Å—Ç–µ–Ω–µ, –∏–∑–º–µ–Ω–∏—Ç–µ X –∏–ª–∏ Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  ================================================
  */
  
  // üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–û–ó–ò–¶–ò–ô –î–õ–Ø –ö–ê–ñ–î–û–ô –ö–û–ú–ù–ê–¢–´ üéØ
  const roomPositions = {
    chambre1: {
      spawn: [-1, 0.1, -3.5],    // X: –ø—Ä–∞–≤–æ/–ª–µ–≤–æ, Y: –≤—ã—Å–æ—Ç–∞, Z: –≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥
      height: -1.6               // –í—ã—Å–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)
    },
    chambre2: {
      spawn: [2.40, 0.1, 3.60],   // –¶–µ–Ω—Ç—Ä –∫–æ–º–Ω–∞—Ç—ã, –Ω–µ–º–Ω–æ–≥–æ –≤–ø–µ—Ä–µ–¥
      height: -1.6               // –í—ã—Å–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (–ò–ó–ú–ï–ù–ò–¢–ï –î–õ–Ø –†–ï–ì–£–õ–ò–†–û–í–ö–ò)
    },
    chambreWC: {
      spawn: [2, 0.1, -0.50],    // Position d'entr√©e depuis chambre2
      height: -1.6               // –í—ã—Å–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    },
    chambre3: {
      spawn: [0, 0.1, 5],        // –¶–µ–Ω—Ç—Ä –∫–æ–º–Ω–∞—Ç—ã
      height: -1.6               // –í—ã—Å–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞)
    }
  };

  const [playerPosition, setPlayerPosition] = useState(
    new THREE.Vector3(...roomPositions.chambre1.spawn)
  );
  const [nearDoor, setNearDoor] = useState(false);
  const [nearDirectDoor, setNearDirectDoor] = useState(false); // –î–ª—è –ø—Ä—è–º–æ–π –¥–≤–µ—Ä–∏ –≤ chambre3
  
  // Effet pour mettre √† jour la position du joueur lors du changement de chambre
  useEffect(() => {
    const spawnPosition = roomPositions[currentRoom]?.spawn;
    if (spawnPosition) {
      setPlayerPosition(new THREE.Vector3(...spawnPosition));
      console.log(`üéØ Position joueur mise √† jour pour ${currentRoom}:`, spawnPosition);
    }
  }, [currentRoom]);
  
  const checkTriggers = (position) => {
    // –¢—Ä–∏–≥–≥–µ—Ä—ã —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ (chambre3)
    if (currentRoom === 'chambre3') {
      const triggers = [
        { pos: [8, 0, 0], radius: 3, id: 'red', triggered: false },
        { pos: [-8, 0, 0], radius: 3, id: 'green', triggered: false },
        { pos: [0, 0, -8], radius: 3, id: 'blue', triggered: false }
      ];

      triggers.forEach((trigger) => {
        if (!trigger.triggered) {
          const distance = position.distanceTo(new THREE.Vector3(...trigger.pos));
          if (distance < trigger.radius) {
            trigger.triggered = true;
            onTrigger(trigger.id);
          }
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–µ—Ä–∏ –≤ chambre1 (–ø–µ—Ä–µ—Ö–æ–¥ –≤ chambre2 —Å –∫–æ–¥–æ–º)
    if (currentRoom === 'chambre1') {
      const doorPosition = new THREE.Vector3(0, 0, 0); // –ü–æ–∑–∏—Ü–∏—è –¥–≤–µ—Ä–∏
      const distanceToDoor = position.distanceTo(doorPosition);
      
      if (distanceToDoor < 3) {
        if (!nearDoor) {
          setNearDoor(true);
          console.log('üö™ –î–≤–µ—Ä—å chambre1‚Üíchambre2 - –∫–æ–¥ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
      } else {
        if (nearDoor) {
          setNearDoor(false);
          console.log('üö™ –û—Ç–æ—à–ª–∏ –æ—Ç –¥–≤–µ—Ä–∏ chambre1');
          onCodeClose();
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–µ—Ä–µ–π –≤ chambre2
    else if (currentRoom === 'chambre2') {
      // –î–≤–µ—Ä—å –≤ chambreWC (—Å –∫–æ–¥–æ–º)
      const doorWCPosition = new THREE.Vector3(0.00, 0, -4.15);
      const distanceToWCDoor = position.distanceTo(doorWCPosition);
      
      // –ü—Ä—è–º–∞—è –¥–≤–µ—Ä—å –≤ chambre3 (–±–µ–∑ –∫–æ–¥–∞)
      const directDoorPosition = new THREE.Vector3(-2.45, 0, -3.60);
      const distanceToDirectDoor = position.distanceTo(directDoorPosition);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–µ—Ä–∏ –≤ chambreWC
      if (distanceToWCDoor < 0.5) {
        if (!nearDoor) {
          setNearDoor(true);
          setNearDirectDoor(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥—É—é –¥–≤–µ—Ä—å
          console.log('üö™ –î–≤–µ—Ä—å chambre2‚ÜíchambreWC - –∫–æ–¥ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
      } 
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–π –¥–≤–µ—Ä–∏ –≤ chambre3
      else if (distanceToDirectDoor < 0.5) {
        if (!nearDirectDoor) {
          setNearDirectDoor(true);
          setNearDoor(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥—É—é –¥–≤–µ—Ä—å
          console.log('üö™ –ü—Ä—è–º–∞—è –¥–≤–µ—Ä—å chambre2‚Üíchambre3 - –Ω–∞–∂–º–∏—Ç–µ F');
          console.log(`üîç DEBUG: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: X:${position.x.toFixed(2)}, Z:${position.z.toFixed(2)}`);
          console.log(`üîç DEBUG: –ü–æ–∑–∏—Ü–∏—è –¥–≤–µ—Ä–∏: X:-2.45, Z:-3.60`);
          console.log(`üîç DEBUG: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distanceToDirectDoor.toFixed(2)}`);
        }
      } 
      // –î–∞–ª–µ–∫–æ –æ—Ç –æ–±–µ–∏—Ö –¥–≤–µ—Ä–µ–π
      else {
        if (nearDoor) {
          setNearDoor(false);
          console.log('üö™ –û—Ç–æ—à–ª–∏ –æ—Ç –¥–≤–µ—Ä–∏ chambre2‚ÜíchambreWC');
          onCodeClose();
        }
        if (nearDirectDoor) {
          setNearDirectDoor(false);
          console.log('üö™ –û—Ç–æ—à–ª–∏ –æ—Ç –ø—Ä—è–º–æ–π –¥–≤–µ—Ä–∏ chambre2‚Üíchambre3');
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–µ—Ä–∏ –≤ chambreWC (–ø–µ—Ä–µ—Ö–æ–¥ –≤ chambre3 –±–µ–∑ –∫–æ–¥–∞)
    else if (currentRoom === 'chambreWC') {
      const doorPosition = new THREE.Vector3(5, 0, 5); // –ü–æ–∑–∏—Ü–∏—è –¥–≤–µ—Ä–∏ –≤ WC
      const distanceToDoor = position.distanceTo(doorPosition);
      
      if (distanceToDoor < 2) {
        console.log('üö™ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ chambre3 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        onRoomChange('chambre3');
      }
    }
    
    else {
      // –í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (nearDoor) {
        setNearDoor(false);
        onCodeClose();
      }
    }
  };

  const handleMove = (position) => {
    setPlayerPosition(position.clone());
    checkTriggers(position);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à F (–∞–∫—Ç–∏–≤–∞—Ü–∏—è) –∏ ESC (–∑–∞–∫—Ä—ã—Ç–∏–µ) –¥–ª—è –∫–æ–¥–∞
  useEffect(() => {
    const handleKeyPress = (event) => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–µ—Ä–∏ —Å –∫–æ–¥–æ–º (chambre1 ‚Üí chambre2, chambre2 ‚Üí chambreWC)
      if (nearDoor && (currentRoom === 'chambre1' || currentRoom === 'chambre2')) {
        if (event.code === 'KeyF') {
          event.preventDefault();
          console.log(`üîë –ö–ª–∞–≤–∏—à–∞ F –Ω–∞–∂–∞—Ç–∞ –≤ ${currentRoom} - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–¥–æ–≤—ã–π –∑–∞–º–æ–∫!`);
          onDoorInteraction();
        } else if (event.code === 'Escape') {
          event.preventDefault();
          console.log(`üö™ ESC –Ω–∞–∂–∞—Ç–∞ –≤ ${currentRoom} - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–¥–æ–≤—ã–π –∑–∞–º–æ–∫!`);
          onCodeClose();
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–π –¥–≤–µ—Ä–∏ –≤ chambre3 (–±–µ–∑ –∫–æ–¥–∞)
      if (nearDirectDoor && currentRoom === 'chambre2') {
        if (event.code === 'KeyF') {
          event.preventDefault();
          console.log('üö™ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä—è–º—É—é –¥–≤–µ—Ä—å chambre2 ‚Üí chambre3');
          console.log('üîç DEBUG: onRoomChange –¥–æ—Å—Ç—É–ø–µ–Ω?', typeof onRoomChange);
          console.log('üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º onRoomChange("chambre3")');
          onRoomChange('chambre3');
        }
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [nearDoor, nearDirectDoor, currentRoom, onDoorInteraction, onCodeClose, onRoomChange]);

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <Canvas
        camera={{ 
          position: roomPositions[currentRoom]?.spawn || [0, 0.1, 5], 
          fov: 72
        }}
        style={{ width: '100vw', height: '100vh' }}
      >
        {/* –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ */}
        <ambientLight intensity={0.6} color="#ffffff" />
        <directionalLight
          position={[10, 10, 5]}
          intensity={0.9}
          color="#ffffff"
          castShadow
        />
        <pointLight
          position={[0, 3, 0]}
          intensity={0.8}
          color="#ffeeee"
          distance={25}
        />
        
        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞ –¥–ª—è chambre3 (—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏) */}
        {currentRoom === 'chambre3' && (
          <>
            <pointLight
              position={[8, 2, 0]}
              intensity={0.4}
              color="#ff6666"
              distance={10}
            />
            <pointLight
              position={[-8, 2, 0]}
              intensity={0.4}
              color="#66ff66"
              distance={10}
            />
            <pointLight
              position={[0, 2, -8]}
              intensity={0.4}
              color="#6666ff"
              distance={10}
            />
          </>
        )}
        
        {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è WC */}
        {currentRoom === 'chambreWC' && (
          <pointLight
            position={[3, 2, 3]}
            intensity={0.3}
            color="#ffffff"
            distance={8}
          />
        )}

        {/* FPS —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <FirstPersonControls onMove={handleMove} currentRoom={currentRoom} />

        {/* GLB –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–º–µ—â–µ–Ω–∏–π */}
        <GLBModel path="/chambre1.glb" visible={currentRoom === 'chambre1'} />
        <GLBModel path="/chambre2.glb" visible={currentRoom === 'chambre2'} />
        <GLBModel path="/chambreWC.glb" visible={currentRoom === 'chambreWC'} />
        <GLBModel path="/chambre3.glb" visible={currentRoom === 'chambre3'} />

        {/* Fallback –∫–æ–º–Ω–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è chambre3 (—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏) */}
        {currentRoom === 'chambre3' && <Room />}
        
        {/* Fallback –¥–≤–µ—Ä–∏ (–µ—Å–ª–∏ –Ω–µ—Ç GLB –º–æ–¥–µ–ª–µ–π) */}
        {currentRoom === 'chambre1' && (
          <mesh position={[0, 1, 0]}>
            <boxGeometry args={[2, 3, 0.2]} />
            <meshLambertMaterial color="#8B4513" />
          </mesh>
        )}
        
        {currentRoom === 'chambre2' && (
          <mesh position={[0, 1, -8]}>
            <boxGeometry args={[2, 3, 0.2]} />
            <meshLambertMaterial color="#654321" />
          </mesh>
        )}
        
        {currentRoom === 'chambreWC' && (
          <mesh position={[5, 1, 5]}>
            <boxGeometry args={[1.5, 2.5, 0.2]} />
            <meshLambertMaterial color="#4A4A4A" />
          </mesh>
        )}
      </Canvas>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div style={{
        position: 'absolute',
        top: 20,
        left: 20,
        color: 'white',
        background: 'rgba(0,0,0,0.8)',
        padding: '15px',
        borderRadius: '5px',
        fontSize: '14px'
      }}>
        <h3 style={{ margin: '0 0 10px 0', color: '#ff6666' }}>
          üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - {
            currentRoom === 'chambre1' ? 'Chambre 1 (–°—Ç–∞—Ä—Ç)' :
            currentRoom === 'chambre2' ? 'Chambre 2' :
            currentRoom === 'chambreWC' ? 'Chambre WC' :
            currentRoom === 'chambre3' ? 'Chambre 3 (–§–∏–Ω–∞–ª)' : currentRoom
          }
        </h3>
        <ul style={{ margin: 0, paddingLeft: '20px' }}>
          <li>W, A, S, D - –î–≤–∏–∂–µ–Ω–∏–µ</li>
          <li>–ú—ã—à—å - –û–±–∑–æ—Ä</li>
          <li>–ö–ª–∏–∫ - –ó–∞—Ö–≤–∞—Ç –º—ã—à–∏</li>
          <li>ESC - –û—Å–≤–æ–±–æ–¥–∏—Ç—å –º—ã—à—å</li>
          {currentRoom === 'chambre1' && <li>üö™ [F] - –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Chambre 2</li>}
          {currentRoom === 'chambre2' && <li>üö™ [F] - –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ WC</li>}
          {currentRoom === 'chambre2' && <li>üîì [F] - –ø—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ –≤ Chambre 3 (X:-2.45, Z:-3.60)</li>}
          {currentRoom === 'chambreWC' && <li>üö™ –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –¥–≤–µ—Ä–∏ ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ Chambre 3</li>}
          {currentRoom === 'chambre3' && <li>üëª –ù–∞–π–¥–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Å–∫—Ä–∏–º–µ—Ä–æ–≤!</li>}
        </ul>
        
        {/* Debug panel for boundaries */}
        <div style={{
          marginTop: '15px',
          padding: '10px',
          backgroundColor: 'rgba(0, 0, 255, 0.1)',
          borderRadius: '5px',
          fontSize: '12px',
          color: '#66ccff'
        }}>
          <strong>üîß –û—Ç–ª–∞–¥–∫–∞ –≥—Ä–∞–Ω–∏—Ü:</strong><br/>
          –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: X: {playerPosition.x.toFixed(2)}, Z: {playerPosition.z.toFixed(2)}<br/>
          –ì—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–Ω–∞—Ç—ã: {
            currentRoom === 'chambre1' ? 'X: ¬±8, Z: ¬±8' :
            currentRoom === 'chambre2' ? 'X: -10‚Üí10, Z: -12‚Üí6' :
            currentRoom === 'chambreWC' ? 'X: -2‚Üí8, Z: -2‚Üí8' :
            currentRoom === 'chambre3' ? 'X: ¬±12, Z: ¬±12' :
            '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
          }
        </div>
        
        <p style={{ fontSize: '12px', color: '#888', margin: '10px 0 0 0' }}>
          –ü–æ–∑–∏—Ü–∏—è: X:{playerPosition.x.toFixed(1)} Z:{playerPosition.z.toFixed(1)}
        </p>
        <button 
          onClick={() => onTrigger('red')}
          style={{
            marginTop: '10px',
            padding: '5px 10px',
            background: '#ff3333',
            color: 'white',
            border: 'none',
            borderRadius: '3px',
            cursor: 'pointer',
            fontSize: '12px'
          }}
        >
          üîä –¢–µ—Å—Ç –∑–≤—É–∫–∞
        </button>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ */}
      {nearDoor && (currentRoom === 'chambre1' || currentRoom === 'chambre2') && (
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          background: 'rgba(0,0,0,0.9)',
          color: '#ffff00',
          padding: '20px',
          borderRadius: '10px',
          border: '2px solid #ffff00',
          textAlign: 'center',
          fontSize: '18px',
          fontWeight: 'bold',
          zIndex: 1500,
          animation: 'pulse 2s infinite'
        }}>
          üîë –î–í–ï–†–¨ –ù–ê–ô–î–ï–ù–ê!<br/>
          <span style={{ fontSize: '14px' }}>
            {currentRoom === 'chambre1' ? '–ü–µ—Ä–µ—Ö–æ–¥ –≤ Chambre 2' : '–ü–µ—Ä–µ—Ö–æ–¥ –≤ WC'}<br/>
            [F] - –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–¥ | [ESC] - –∑–∞–∫—Ä—ã—Ç—å
          </span>
        </div>
      )}

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä—è–º–æ–π –¥–≤–µ—Ä–∏ –≤ chambre3 */}
      {nearDirectDoor && currentRoom === 'chambre2' && (
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          background: 'rgba(0,100,0,0.9)',
          color: '#00ff00',
          padding: '20px',
          borderRadius: '10px',
          border: '2px solid #00ff00',
          textAlign: 'center',
          fontSize: '18px',
          fontWeight: 'bold',
          zIndex: 1500,
          animation: 'pulse 2s infinite'
        }}>
          üö™ –ü–†–Ø–ú–û–ô –ü–†–û–•–û–î!<br/>
          <span style={{ fontSize: '14px' }}>
            –ü–µ—Ä–µ—Ö–æ–¥ –≤ Chambre 3<br/>
            [F] - –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å
          </span>
        </div>
      )}
    </div>
  );
}

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–º–µ—Ä
function ScreamerEffect({ triggerId, onClose }) {
  const effects = {
    red: "üíÄ –ö–†–ê–°–ù–ê–Ø –ó–û–ù–ê! üíÄ",
    green: "ü©∏ –ó–ï–õ–ï–ù–ê–Ø –ó–û–ù–ê! ü©∏",
    blue: "üëÅÔ∏è –°–ò–ù–Ø–Ø –ó–û–ù–ê! üëÅÔ∏è"
  };

  useEffect(() => {
    const timer = setTimeout(() => {
      onClose();
    }, 2000);
    return () => clearTimeout(timer);
  }, [onClose]);

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      width: '100vw',
      height: '100vh',
      background: '#000',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      zIndex: 1000
    }}>
      <div style={{
        fontSize: '4rem',
        color: '#fff',
        textShadow: '0 0 10px #ff0000',
        textAlign: 'center'
      }}>
        {effects[triggerId] || "üëª –ù–ê–ô–î–ï–ù–û! üëª"}
      </div>
    </div>
  );
}

function App() {
  console.log('App —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è');
  const [gameStarted, setGameStarted] = useState(false);
  const [showScreamer, setShowScreamer] = useState(false);
  const [triggerId, setTriggerId] = useState(null);
  const [audioContext, setAudioContext] = useState(null);
  const [currentRoom, setCurrentRoom] = useState('chambre1'); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è (chambre1)
  const [showCodeLock, setShowCodeLock] = useState(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ
  useEffect(() => {
    const initAudio = async () => {
      if (!audioContext) {
        try {
          const ctx = new (window.AudioContext || window.webkitAudioContext)();
          if (ctx.state === 'suspended') {
            await ctx.resume();
          }
          setAudioContext(ctx);
          console.log('‚úÖ –ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', ctx.state);
          
          // –¢–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
          const testOsc = ctx.createOscillator();
          const testGain = ctx.createGain();
          testOsc.connect(testGain);
          testGain.connect(ctx.destination);
          testOsc.frequency.setValueAtTime(440, ctx.currentTime);
          testGain.gain.setValueAtTime(0.1, ctx.currentTime);
          testGain.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 0.1);
          testOsc.start(ctx.currentTime);
          testOsc.stop(ctx.currentTime + 0.1);
          console.log('üîä –¢–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
        }
      }
    };

    const handleFirstInteraction = () => {
      console.log('üëÜ –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤—É–∫');
      initAudio();
    };

    document.addEventListener('click', handleFirstInteraction, { once: true });
    document.addEventListener('keydown', handleFirstInteraction, { once: true });
    return () => {
      document.removeEventListener('click', handleFirstInteraction);
      document.removeEventListener('keydown', handleFirstInteraction);
    };
  }, [audioContext]);

  const handleDoorInteraction = () => {
    console.log('üö™ –ò–≥—Ä–æ–∫ –ø–æ–¥–æ—à–µ–ª –∫ –¥–≤–µ—Ä–∏');
    setShowCodeLock(true);
  };

  const handleCodeSuccess = () => {
    let nextRoom = '';
    
    if (currentRoom === 'chambre1') {
      nextRoom = 'chambre2';
      console.log('‚úÖ –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∏–∑ chambre1 –≤ chambre2');
    } else if (currentRoom === 'chambre2') {
      nextRoom = 'chambreWC';
      console.log('‚úÖ –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∏–∑ chambre2 –≤ chambreWC');
    }
    
    setCurrentRoom(nextRoom);
    setShowCodeLock(false);
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    setTimeout(() => {
      const canvas = document.querySelector('canvas');
      if (canvas) {
        // –ü–æ–ª—É—á–∞–µ–º Canvas –∏–∑ React Three Fiber –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É
        const scene = canvas.__reactInternalInstance || canvas._reactInternalFiber;
        if (scene) {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
          console.log(`üìç –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –≤ ${nextRoom}`);
          
          // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const updatePosition = () => {
            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            window.dispatchEvent(new CustomEvent('forcePositionUpdate', { detail: nextRoom }));
          };
          
          requestAnimationFrame(updatePosition);
        }
        
        canvas.requestPointerLock();
        console.log(`üñ±Ô∏è –ö—É—Ä—Å–æ—Ä –∑–∞—Ö–≤–∞—á–µ–Ω –¥–ª—è ${nextRoom}`);
      }
    }, 100);
  };

  const handleCodeClose = () => {
    setShowCodeLock(false);
    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è FPS —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      const canvas = document.querySelector('canvas');
      if (canvas) {
        canvas.requestPointerLock();
        console.log('üñ±Ô∏è –ö—É—Ä—Å–æ—Ä –∑–∞—Ö–≤–∞—á–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è FPS');
      }
    }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
  };

  // –£–∂–∞—Å–Ω—ã–π –∑–≤—É–∫ —Å–∫—Ä–∏–º–µ—Ä–∞
  const playScreamerSound = async (type) => {
    console.log('üéµ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —Å–∫—Ä–∏–º–µ—Ä–∞:', type);
    
    if (!audioContext) {
      console.warn('‚ùå –ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    if (audioContext.state === 'suspended') {
      console.log('üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç...');
      await audioContext.resume();
    }
    
    console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', audioContext.state);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–µ–≤ —É–∂–∞—Å–Ω–æ–≥–æ –∑–≤—É–∫–∞
      const now = audioContext.currentTime;
      
      // –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞—à–Ω—ã–π –∑–≤—É–∫ - –Ω–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞
      const oscillator1 = audioContext.createOscillator();
      const gain1 = audioContext.createGain();
      oscillator1.connect(gain1);
      gain1.connect(audioContext.destination);
      
      oscillator1.frequency.setValueAtTime(100, now);
      oscillator1.frequency.exponentialRampToValueAtTime(50, now + 0.5);
      oscillator1.frequency.exponentialRampToValueAtTime(200, now + 1);
      
      gain1.gain.setValueAtTime(0.3, now);
      gain1.gain.exponentialRampToValueAtTime(0.01, now + 1.5);
      
      oscillator1.start(now);
      oscillator1.stop(now + 1.5);
      console.log('üîä –û—Å–Ω–æ–≤–Ω–æ–π –∑–≤—É–∫ –∑–∞–ø—É—â–µ–Ω');

      // –í—ã—Å–æ–∫–∏–π –ø—Ä–æ–Ω–∑–∏—Ç–µ–ª—å–Ω—ã–π –∑–≤—É–∫
      const oscillator2 = audioContext.createOscillator();
      const gain2 = audioContext.createGain();
      oscillator2.connect(gain2);
      gain2.connect(audioContext.destination);
      
      oscillator2.frequency.setValueAtTime(1000, now + 0.2);
      oscillator2.frequency.exponentialRampToValueAtTime(2000, now + 0.4);
      oscillator2.frequency.exponentialRampToValueAtTime(500, now + 0.8);
      
      gain2.gain.setValueAtTime(0.2, now + 0.2);
      gain2.gain.exponentialRampToValueAtTime(0.01, now + 1);
      
      oscillator2.start(now + 0.2);
      oscillator2.stop(now + 1);
      console.log('üîä –í—ã—Å–æ–∫–∏–π –∑–≤—É–∫ –∑–∞–ø—É—â–µ–Ω');

      // –ñ–µ–Ω—Å–∫–∏–π –∫—Ä–∏–∫ - –∏–º–∏—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞
      const screamOsc1 = audioContext.createOscillator();
      const screamOsc2 = audioContext.createOscillator();
      const screamGain = audioContext.createGain();
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
      const filter = audioContext.createBiquadFilter();
      filter.type = 'bandpass';
      filter.frequency.setValueAtTime(800, now);
      filter.Q.setValueAtTime(5, now);
      
      screamOsc1.connect(filter);
      screamOsc2.connect(filter);
      filter.connect(screamGain);
      screamGain.connect(audioContext.destination);
      
      // –ü–µ—Ä–≤—ã–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä - –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∫—Ä–∏–∫–∞ (–∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å)
      screamOsc1.frequency.setValueAtTime(600, now);
      screamOsc1.frequency.exponentialRampToValueAtTime(1200, now + 0.3);
      screamOsc1.frequency.exponentialRampToValueAtTime(800, now + 0.8);
      screamOsc1.frequency.exponentialRampToValueAtTime(400, now + 1.2);
      
      // –í—Ç–æ—Ä–æ–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä - –≥–∞—Ä–º–æ–Ω–∏–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      screamOsc2.frequency.setValueAtTime(1200, now);
      screamOsc2.frequency.exponentialRampToValueAtTime(2400, now + 0.3);
      screamOsc2.frequency.exponentialRampToValueAtTime(1600, now + 0.8);
      screamOsc2.frequency.exponentialRampToValueAtTime(800, now + 1.2);
      
      // –û–≥–∏–±–∞—é—â–∞—è –∫—Ä–∏–∫–∞ - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–µ–∑–∫–æ, –∑–∞—Ç—É—Ö–∞–µ—Ç
      screamGain.gain.setValueAtTime(0.4, now);
      screamGain.gain.setValueAtTime(0.6, now + 0.1);
      screamGain.gain.exponentialRampToValueAtTime(0.3, now + 0.5);
      screamGain.gain.exponentialRampToValueAtTime(0.1, now + 0.9);
      screamGain.gain.exponentialRampToValueAtTime(0.01, now + 1.3);
      
      screamOsc1.start(now);
      screamOsc1.stop(now + 1.3);
      screamOsc2.start(now);
      screamOsc2.stop(now + 1.3);
      console.log('üîä –ñ–µ–Ω—Å–∫–∏–π –∫—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω');

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      if (type === 'red') {
        // –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ - –ø—Ä–µ—Ä—ã–≤–∏—Å—Ç—ã–π –∫—Ä–∏–∫ —Å –ø–∞–Ω–∏–∫–æ–π
        for (let i = 0; i < 4; i++) {
          const panicScream = audioContext.createOscillator();
          const panicGain = audioContext.createGain();
          const panicFilter = audioContext.createBiquadFilter();
          
          panicFilter.type = 'highpass';
          panicFilter.frequency.setValueAtTime(400, now + i * 0.2);
          
          panicScream.connect(panicFilter);
          panicFilter.connect(panicGain);
          panicGain.connect(audioContext.destination);
          
          panicScream.frequency.setValueAtTime(700 + i * 100, now + i * 0.2);
          panicScream.frequency.exponentialRampToValueAtTime(1400, now + i * 0.2 + 0.15);
          
          panicGain.gain.setValueAtTime(0.3, now + i * 0.2);
          panicGain.gain.exponentialRampToValueAtTime(0.01, now + i * 0.2 + 0.15);
          
          panicScream.start(now + i * 0.2);
          panicScream.stop(now + i * 0.2 + 0.15);
        }
      } else if (type === 'green') {
        // –ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ - –¥–æ–ª–≥–∏–π –ø—Ä–æ—Ç—è–∂–Ω—ã–π –∫—Ä–∏–∫
        const longScream = audioContext.createOscillator();
        const longGain = audioContext.createGain();
        const tremolo = audioContext.createOscillator();
        const tremoloGain = audioContext.createGain();
        
        tremolo.frequency.setValueAtTime(8, now); // –¢—Ä–µ–º–æ–ª–æ —ç—Ñ—Ñ–µ–∫—Ç
        tremolo.connect(tremoloGain);
        tremoloGain.gain.setValueAtTime(0.3, now);
        
        longScream.connect(longGain);
        longGain.connect(audioContext.destination);
        tremoloGain.connect(longGain.gain);
        
        longScream.frequency.setValueAtTime(900, now);
        longScream.frequency.linearRampToValueAtTime(1100, now + 0.5);
        longScream.frequency.linearRampToValueAtTime(800, now + 1.2);
        
        longGain.gain.setValueAtTime(0.35, now);
        longGain.gain.exponentialRampToValueAtTime(0.01, now + 1.5);
        
        tremolo.start(now);
        tremolo.stop(now + 1.5);
        longScream.start(now);
        longScream.stop(now + 1.5);
      } else if (type === 'blue') {
        // –°–∏–Ω—è—è –∑–æ–Ω–∞ - —ç—Ö–æ –∫—Ä–∏–∫–∞ —Å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π
        for (let i = 0; i < 3; i++) {
          const echoScream = audioContext.createOscillator();
          const echoGain = audioContext.createGain();
          const echoFilter = audioContext.createBiquadFilter();
          
          echoFilter.type = 'lowpass';
          echoFilter.frequency.setValueAtTime(1000 - i * 200, now + i * 0.4);
          
          echoScream.connect(echoFilter);
          echoFilter.connect(echoGain);
          echoGain.connect(audioContext.destination);
          
          echoScream.frequency.setValueAtTime(600 - i * 50, now + i * 0.4);
          echoScream.frequency.exponentialRampToValueAtTime(1000 - i * 100, now + i * 0.4 + 0.6);
          
          echoGain.gain.setValueAtTime(0.25 - i * 0.05, now + i * 0.4);
          echoGain.gain.exponentialRampToValueAtTime(0.01, now + i * 0.4 + 0.8);
          
          echoScream.start(now + i * 0.4);
          echoScream.stop(now + i * 0.4 + 0.8);
        }
      }
    
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
    }
  };

  const handleTrigger = (id) => {
    console.log('–¢—Ä–∏–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', id);
    setTriggerId(id);
    setShowScreamer(true);
    
    // –ò–≥—Ä–∞–µ–º —É–∂–∞—Å–Ω—ã–π –∑–≤—É–∫
    playScreamerSound(id);
  };

  const closeScreamer = () => {
    setShowScreamer(false);
    setTriggerId(null);
  };

  if (!gameStarted) {
    return (
      <div className="App">
        <div className="start-screen">
          <h1>SYNTAX HORROR</h1>
          <p>–î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ü–µ—Ä–≤–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ ‚Üí –ö–æ–¥ ‚Üí –í—Ç–æ—Ä–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ</p>
          <button 
            className="start-button" 
            onClick={() => {
              console.log('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞');
              setGameStarted(true);
            }}
          >
            üéÆ –ù–∞—á–∞—Ç—å
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      <HorrorScene 
        onTrigger={handleTrigger} 
        currentRoom={currentRoom}
        onDoorInteraction={handleDoorInteraction}
        onCodeClose={handleCodeClose}
        onRoomChange={setCurrentRoom}
      />
      
      {showScreamer && (
        <ScreamerEffect triggerId={triggerId} onClose={closeScreamer} />
      )}
      
      {showCodeLock && (
        <CodeLock 
          isVisible={showCodeLock}
          onSuccess={handleCodeSuccess}
          onClose={handleCodeClose}
        />
      )}
      
      <button 
        onClick={() => setGameStarted(false)}
        style={{
          position: 'absolute',
          top: 20,
          right: 20,
          padding: '10px 20px',
          background: '#666',
          color: 'white',
          border: 'none',
          borderRadius: '5px',
          cursor: 'pointer',
          zIndex: 1000
        }}
      >
        üè† –í—ã—Ö–æ–¥
      </button>
      
      {currentRoom !== 'chambre1' && (
        <button 
          onClick={() => setCurrentRoom('chambre1')}
          style={{
            position: 'absolute',
            top: 70,
            right: 20,
            padding: '10px 20px',
            background: '#444',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            zIndex: 1000
          }}
        >
          üö™ –í Chambre 1
        </button>
      )}
    </div>
  );
}

export default App;